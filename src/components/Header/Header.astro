---
import "./Header.css";
import Options from "./Options.astro";

const { header, lang } = Astro.props;
---

<header class="header">
	<nav class="header-nav">
		<div class="header__logo">
			<img src="/avatar.webp"/ alt="avatar">
		</div>
    <button id="hamburguer-nav" type="button" class="hamburguer">
      <span class="hamburguer-line"></span>
      <span class="hamburguer-line"></span>
      <span class="hamburguer-line"></span>
    </button>

    <div class="header__right">
      <div class="header__links">
        {header.map((navItem: any, index: number) => (
          <a
            href={navItem.url}
            aria-label={navItem.label}
            style={`--a:${index}`}
          >
            {navItem.title}
          </a>
        ))}
      </div>
      <Options lang={lang} />
    </div>
	</nav>
</header>

<script>
  const hamburguerBtn = document.getElementById("hamburguer-nav");
  const headerWrap = document.querySelector(".header");

  hamburguerBtn?.addEventListener("click", () => {
    hamburguerBtn.classList.toggle("active");
    headerWrap?.classList.toggle("active");
  })

  document.addEventListener("astro:page-load", () => {
		const sections = document.querySelectorAll("section");
		const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("link-active")
            } else {
              item.classList.remove("link-active")
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

		sections.forEach((section) => {
			observer.observe(section);
		});

		document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  });
</script>